//
// Source code generated by Celerio, a Jaxio product.
// Documentation: http://www.jaxio.com/documentation/celerio/
// Follow us on twitter: @jaxiosoft
// Need commercial support ? Contact us: info@jaxio.com
// Template pack-angular:src/main/webapp/app/entities/entity-list.component.ts.e.vm
//
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Router } from '@angular/router';
import { LazyLoadEvent } from 'primeng/primeng';
import { PageResponse } from "../../support/paging";
import { MessageService } from '../../service/message.service';
import { PackageInfo } from './packageInfo';
import { PackageInfoDetailComponent } from './packageInfo-detail.component';
import { PackageInfoService } from './packageInfo.service';

import { PackageType } from '../packageType/packageType';
import { PackageTypeLineComponent } from '../packageType/packageType-line.component';
import { ServerType } from '../serverType/serverType';
import { ServerTypeLineComponent } from '../serverType/serverType-line.component';
import { Release } from '../release/release';
import { ReleaseLineComponent } from '../release/release-line.component';

@Component({
    moduleId: module.id,
	templateUrl: 'packageInfo-list.component.html',
	selector: 'packageInfo-list',
})
export class PackageInfoListComponent {

    @Input() header = "All PackageInfos...";

    // when sub is true, it means this list is a one-to-many list.
    // It belongs to a parent entity, as a result the addNew operation
    // must prefill the parent entity. The prefill is not done here, instead we
    // emit an event.
    @Input() sub : boolean;
    @Output() onAddNewClicked = new EventEmitter();

    packageInfoToDelete : PackageInfo;
    displayDeleteDialog : boolean;

    private example : PackageInfo = null; // used to query by example...

    // list is paginated
    currentPage : PageResponse<PackageInfo> = new PageResponse<PackageInfo>(0,0,[]);

    // Many to one: input param is used to filter the list when displayed
    // as a one-to-many list by the other side.
    private _packageType : PackageType;
    private _serverType : ServerType;
    private _release : Release;

    constructor(private router:Router, private packageInfoService : PackageInfoService, private messageService : MessageService) { }

    loadPage(event : LazyLoadEvent) {
        this.packageInfoService.getPage(this.example, event).
            subscribe(
                pageResponse => this.currentPage = pageResponse,
                error => this.messageService.error('Could not get the results', error)
            );
    }

    // Many to one: input param is used to filter the list when displayed
    // as a one-to-many list by the other side.
    @Input()
    set packageType(packageType : PackageType) {
        if (packageType == null) {
            return;
        }
        this._packageType = packageType;

        this.example = new PackageInfo();
        this.example.packageType = new PackageType();
        this.example.packageType.id = this._packageType.id;
    }

    @Input()
    set serverType(serverType : ServerType) {
        if (serverType == null) {
            return;
        }
        this._serverType = serverType;

        this.example = new PackageInfo();
        this.example.serverType = new ServerType();
        this.example.serverType.id = this._serverType.id;
    }

    @Input()
    set release(release : Release) {
        if (release == null) {
            return;
        }
        this._release = release;

        this.example = new PackageInfo();
        this.example.release = new Release();
        this.example.release.id = this._release.id;
    }


    onRowSelect(event : any) {
        this.router.navigate(['/packageInfo', event.data.id]);
    }

    addNew() {
        if (this.sub) {
            this.onAddNewClicked.emit("addNew");
        } else {
            this.router.navigate(['/packageInfo', 'new']);
        }
    }

    showDeleteDialog(rowData : any) {
        this.packageInfoToDelete = <PackageInfo> rowData;
        this.displayDeleteDialog = true;
    }

    // delete + remove from current page
    delete() {
        this.packageInfoService.delete(this.packageInfoToDelete.id).
            subscribe(
                response => {
                    this.currentPage.remove(this.packageInfoToDelete);
                    this.displayDeleteDialog = false;
                    this.packageInfoToDelete = null;
                    this.messageService.info('Deleted OK', 'PrimeNG Rocks ;-)');
                },
                error => this.messageService.error('Could not delete!', error)
            );
    }
}